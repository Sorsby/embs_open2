

================================================================
== Vivado HLS Report for 'toplevel'
================================================================
* Date:           Wed May 09 02:41:27 2018

* Version:        2016.2 (Build 1577090 on Thu Jun 02 16:59:10 MDT 2016)
* Project:        particle_sim_hls
* Solution:       solution1
* Product family: zynq
* Target device:  xc7z010clg400-1


================================================================
== Performance Estimates
================================================================
+ Timing (ns): 
    * Summary: 
    +--------+-------+----------+------------+
    |  Clock | Target| Estimated| Uncertainty|
    +--------+-------+----------+------------+
    |ap_clk  |  10.00|      9.53|        1.25|
    +--------+-------+----------+------------+

+ Latency (clock cycles): 
    * Summary: 
    +-----+---------+-----+---------+---------+
    |    Latency    |    Interval   | Pipeline|
    | min |   max   | min |   max   |   Type  |
    +-----+---------+-----+---------+---------+
    |    3|  6576003|    4|  6576004|   none  |
    +-----+---------+-----+---------+---------+

    + Detail: 
        * Instance: 
        N/A

        * Loop: 
        +--------------------------+-----+---------+----------+-----------+-----------+-----------+----------+
        |                          |    Latency    | Iteration|  Initiation Interval  |    Trip   |          |
        |         Loop Name        | min |   max   |  Latency |  achieved |   target  |   Count   | Pipelined|
        +--------------------------+-----+---------+----------+-----------+-----------+-----------+----------+
        |- updateParticleLoop      |    0|  6576000| 96 ~ 548 |          -|          -| 0 ~ 12000 |    no    |
        | + calculateVelocityLoop  |   64|      488|        77|          4|          1|  0 ~ 104  |    yes   |
        +--------------------------+-----+---------+----------+-----------+-----------+-----------+----------+

============================================================
+ Verbose Summary: Synthesis Manager
============================================================
InlineROM: 1
ExposeGlobal: 0
============================================================
+ Verbose Summary: CDFG Model
============================================================
IsTopModel: 1
ResetActiveHigh: 1
IsCombinational: 0
IsDatapathOnly: 0
HasWiredReturn: 2
HasMFsm: 0
HasVarLatency: 1
IsPipeline: 0
IsRtlPipelined: 0
IsInstanceOverlapped: 0
IsDontTouch: 0
HasImplIP: 0
IsGatedGlobalClock: 0

+ Individual pipeline summary: 
  * Pipeline-0: initiation interval (II) = 4, depth = 77


============================================================
+ Verbose Summary: Schedule
============================================================
* Number of FSM states: 139
* Pipeline: 1
  Pipeline-0: II = 4, D = 77, States = { 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 }
* Dataflow Pipeline: 0

* FSM state transitions: 
1 --> 
	2  / true
2 --> 
	3  / true
3 --> 
	4  / (tmp)
	139  / (!tmp)
4 --> 
	5  / true
5 --> 
	6  / true
6 --> 
	7  / true
7 --> 
	8  / true
8 --> 
	9  / true
9 --> 
	10  / true
10 --> 
	11  / true
11 --> 
	12  / true
12 --> 
	13  / true
13 --> 
	14  / true
14 --> 
	15  / true
15 --> 
	16  / true
16 --> 
	17  / true
17 --> 
	18  / true
18 --> 
	19  / true
19 --> 
	20  / true
20 --> 
	21  / true
21 --> 
	22  / true
22 --> 
	23  / true
23 --> 
	24  / true
24 --> 
	25  / true
25 --> 
	26  / (tmp_15)
	33  / (!tmp_15)
26 --> 
	27  / true
27 --> 
	28  / true
28 --> 
	29  / true
29 --> 
	30  / true
30 --> 
	31  / true
31 --> 
	32  / true
32 --> 
	33  / true
33 --> 
	34  / true
34 --> 
	35  / (tmp_32)
	42  / (!tmp_32)
35 --> 
	36  / true
36 --> 
	37  / true
37 --> 
	38  / true
38 --> 
	39  / true
39 --> 
	40  / true
40 --> 
	41  / true
41 --> 
	42  / true
42 --> 
	43  / true
43 --> 
	44  / (tmp_45)
	51  / (!tmp_45)
44 --> 
	45  / true
45 --> 
	46  / true
46 --> 
	47  / true
47 --> 
	48  / true
48 --> 
	49  / true
49 --> 
	50  / true
50 --> 
	51  / true
51 --> 
	52  / true
52 --> 
	53  / (tmp_50)
	60  / (!tmp_50)
53 --> 
	54  / true
54 --> 
	55  / true
55 --> 
	56  / true
56 --> 
	57  / true
57 --> 
	58  / true
58 --> 
	59  / true
59 --> 
	60  / true
60 --> 
	61  / true
61 --> 
	62  / true
62 --> 
	63  / true
63 --> 
	64  / true
64 --> 
	65  / true
65 --> 
	66  / true
66 --> 
	67  / true
67 --> 
	68  / true
68 --> 
	69  / true
69 --> 
	70  / true
70 --> 
	71  / true
71 --> 
	72  / true
72 --> 
	73  / true
73 --> 
	74  / true
74 --> 
	75  / true
75 --> 
	76  / true
76 --> 
	77  / true
77 --> 
	78  / true
78 --> 
	79  / true
79 --> 
	80  / true
80 --> 
	81  / true
81 --> 
	82  / true
82 --> 
	83  / true
83 --> 
	84  / true
84 --> 
	85  / true
85 --> 
	86  / true
86 --> 
	87  / true
87 --> 
	88  / true
88 --> 
	89  / true
89 --> 
	90  / true
90 --> 
	91  / true
91 --> 
	92  / true
92 --> 
	93  / true
93 --> 
	94  / true
94 --> 
	95  / true
95 --> 
	96  / true
96 --> 
	97  / true
97 --> 
	98  / true
98 --> 
	99  / true
99 --> 
	100  / true
100 --> 
	101  / true
101 --> 
	102  / true
102 --> 
	103  / true
103 --> 
	104  / true
104 --> 
	105  / true
105 --> 
	106  / true
106 --> 
	107  / true
107 --> 
	108  / true
108 --> 
	109  / true
109 --> 
	110  / true
110 --> 
	111  / true
111 --> 
	112  / true
112 --> 
	113  / true
113 --> 
	114  / true
114 --> 
	115  / true
115 --> 
	116  / true
116 --> 
	117  / true
117 --> 
	118  / true
118 --> 
	119  / true
119 --> 
	120  / true
120 --> 
	121  / true
121 --> 
	122  / true
122 --> 
	123  / true
123 --> 
	124  / true
124 --> 
	125  / true
125 --> 
	138  / (!tmp_24)
	126  / (tmp_24)
126 --> 
	127  / true
127 --> 
	128  / true
128 --> 
	129  / true
129 --> 
	130  / true
130 --> 
	131  / true
131 --> 
	132  / true
132 --> 
	133  / true
133 --> 
	134  / true
134 --> 
	135  / true
135 --> 
	136  / true
136 --> 
	137  / true
137 --> 
	61  / true
138 --> 
	3  / true
139 --> 
* FSM state operations: 

 <State 1>: 1.00ns
ST_1: ram_read [1/1] 1.00ns
:0  %ram_read = call i32 @_ssdm_op_Read.s_axilite.i32(i32 %ram)

ST_1: tmp_1 [1/1] 0.00ns
:1  %tmp_1 = call i30 @_ssdm_op_PartSelect.i30.i32.i32.i32(i32 %ram_read, i32 2, i32 31)

ST_1: numP_read [2/2] 1.00ns
:12  %numP_read = call i32 @_ssdm_op_Read.s_axilite.i32P(i32* %numP)

ST_1: numA_read [2/2] 1.00ns
:14  %numA_read = call i32 @_ssdm_op_Read.s_axilite.i32P(i32* %numA)


 <State 2>: 1.57ns
ST_2: tmp_62_cast [1/1] 0.00ns
:2  %tmp_62_cast = zext i30 %tmp_1 to i33

ST_2: stg_145 [1/1] 0.00ns
:3  call void (...)* @_ssdm_op_SpecBitsMap(float* %MAXI), !map !19

ST_2: stg_146 [1/1] 0.00ns
:4  call void (...)* @_ssdm_op_SpecBitsMap(i32* %numP) nounwind, !map !23

ST_2: stg_147 [1/1] 0.00ns
:5  call void (...)* @_ssdm_op_SpecBitsMap(i32* %numA) nounwind, !map !27

ST_2: stg_148 [1/1] 0.00ns
:6  call void (...)* @_ssdm_op_SpecTopModule([9 x i8]* @toplevel_str) nounwind

ST_2: stg_149 [1/1] 0.00ns
:7  call void (...)* @_ssdm_op_SpecInterface(float* %MAXI, [6 x i8]* @p_str, i32 0, i32 0, i32 0, i32 0, [5 x i8]* @p_str1, [6 x i8]* @p_str2, [1 x i8]* @p_str3, i32 16, i32 16, i32 16, i32 16, [1 x i8]* @p_str3) nounwind

ST_2: stg_150 [1/1] 0.00ns
:8  call void (...)* @_ssdm_op_SpecInterface(i32 %ram, [10 x i8]* @mode, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @bundle, [6 x i8]* @p_str2, [1 x i8]* @p_str3, i32 16, i32 16, i32 16, i32 16, [1 x i8]* @p_str3) nounwind

ST_2: stg_151 [1/1] 0.00ns
:9  call void (...)* @_ssdm_op_SpecInterface(i32* %numP, [10 x i8]* @p_str4, i32 1, i32 1, i32 0, i32 0, [9 x i8]* @p_str5, [1 x i8]* @p_str3, [1 x i8]* @p_str3, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @p_str3) nounwind

ST_2: stg_152 [1/1] 0.00ns
:10  call void (...)* @_ssdm_op_SpecInterface(i32* %numA, [10 x i8]* @p_str4, i32 1, i32 1, i32 0, i32 0, [9 x i8]* @p_str5, [1 x i8]* @p_str3, [1 x i8]* @p_str3, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @p_str3) nounwind

ST_2: stg_153 [1/1] 0.00ns
:11  call void (...)* @_ssdm_op_SpecInterface(i32 0, [10 x i8]* @p_str4, i32 1, i32 1, i32 0, i32 0, [9 x i8]* @p_str5, [1 x i8]* @p_str3, [1 x i8]* @p_str3, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @p_str3) nounwind

ST_2: numP_read [1/2] 1.00ns
:12  %numP_read = call i32 @_ssdm_op_Read.s_axilite.i32P(i32* %numP)

ST_2: stg_155 [1/1] 0.00ns
:13  store i32 %numP_read, i32* @numberParticles, align 4

ST_2: numA_read [1/2] 1.00ns
:14  %numA_read = call i32 @_ssdm_op_Read.s_axilite.i32P(i32* %numA)

ST_2: stg_157 [1/1] 0.00ns
:15  store i32 %numA_read, i32* @numberAttractors, align 4

ST_2: loopend [1/1] 0.00ns
:16  %loopend = shl i32 %numP_read, 2

ST_2: stg_159 [1/1] 1.57ns
:17  br label %1


 <State 3>: 3.89ns
ST_3: i [1/1] 0.00ns
:0  %i = phi i32 [ 0, %0 ], [ %i_1, %11 ]

ST_3: tmp [1/1] 2.52ns
:1  %tmp = icmp ult i32 %i, %loopend

ST_3: stg_162 [1/1] 0.00ns
:2  br i1 %tmp, label %2, label %12

ST_3: tmp_4 [1/1] 0.00ns (grouped into LUT with out node ram2_sum4)
:13  %tmp_4 = or i32 %i, 2

ST_3: tmp_5_cast [1/1] 0.00ns (grouped into LUT with out node ram2_sum4)
:14  %tmp_5_cast = zext i32 %tmp_4 to i33

ST_3: ram2_sum4 [1/1] 2.44ns (out node of the LUT)
:15  %ram2_sum4 = add i33 %tmp_62_cast, %tmp_5_cast

ST_3: ram2_sum4_cast [1/1] 0.00ns
:16  %ram2_sum4_cast = zext i33 %ram2_sum4 to i64

ST_3: pvx [1/1] 0.00ns
:17  %pvx = getelementptr inbounds float* %MAXI, i64 %ram2_sum4_cast

ST_3: stg_168 [2/2] 0.00ns
:0  ret void


 <State 4>: 8.75ns
ST_4: tmp_1_cast [1/1] 0.00ns
:4  %tmp_1_cast = zext i32 %i to i33

ST_4: ram2_sum [1/1] 2.44ns
:5  %ram2_sum = add i33 %tmp_62_cast, %tmp_1_cast

ST_4: ram2_sum_cast [1/1] 0.00ns
:6  %ram2_sum_cast = zext i33 %ram2_sum to i64

ST_4: px [1/1] 0.00ns
:7  %px = getelementptr inbounds float* %MAXI, i64 %ram2_sum_cast

ST_4: pvx_load_req [7/7] 8.75ns
:23  %pvx_load_req = call i1 @_ssdm_op_ReadReq.m_axi.floatP(float* %pvx, i32 1)


 <State 5>: 8.75ns
ST_5: tmp_6 [1/1] 0.00ns (grouped into LUT with out node ram2_sum5)
:18  %tmp_6 = or i32 %i, 3

ST_5: tmp_7_cast [1/1] 0.00ns (grouped into LUT with out node ram2_sum5)
:19  %tmp_7_cast = zext i32 %tmp_6 to i33

ST_5: ram2_sum5 [1/1] 2.44ns (out node of the LUT)
:20  %ram2_sum5 = add i33 %tmp_62_cast, %tmp_7_cast

ST_5: ram2_sum5_cast [1/1] 0.00ns
:21  %ram2_sum5_cast = zext i33 %ram2_sum5 to i64

ST_5: pvy [1/1] 0.00ns
:22  %pvy = getelementptr inbounds float* %MAXI, i64 %ram2_sum5_cast

ST_5: pvx_load_req [6/7] 8.75ns
:23  %pvx_load_req = call i1 @_ssdm_op_ReadReq.m_axi.floatP(float* %pvx, i32 1)

ST_5: px_load_req [7/7] 8.75ns
:25  %px_load_req = call i1 @_ssdm_op_ReadReq.m_axi.floatP(float* %px, i32 1)


 <State 6>: 8.75ns
ST_6: tmp_2 [1/1] 0.00ns (grouped into LUT with out node ram2_sum3)
:8  %tmp_2 = or i32 %i, 1

ST_6: tmp_3_cast [1/1] 0.00ns (grouped into LUT with out node ram2_sum3)
:9  %tmp_3_cast = zext i32 %tmp_2 to i33

ST_6: ram2_sum3 [1/1] 2.44ns (out node of the LUT)
:10  %ram2_sum3 = add i33 %tmp_62_cast, %tmp_3_cast

ST_6: ram2_sum3_cast [1/1] 0.00ns
:11  %ram2_sum3_cast = zext i33 %ram2_sum3 to i64

ST_6: py [1/1] 0.00ns
:12  %py = getelementptr inbounds float* %MAXI, i64 %ram2_sum3_cast

ST_6: pvx_load_req [5/7] 8.75ns
:23  %pvx_load_req = call i1 @_ssdm_op_ReadReq.m_axi.floatP(float* %pvx, i32 1)

ST_6: px_load_req [6/7] 8.75ns
:25  %px_load_req = call i1 @_ssdm_op_ReadReq.m_axi.floatP(float* %px, i32 1)

ST_6: pvy_load_req [7/7] 8.75ns
:31  %pvy_load_req = call i1 @_ssdm_op_ReadReq.m_axi.floatP(float* %pvy, i32 1)


 <State 7>: 8.75ns
ST_7: pvx_load_req [4/7] 8.75ns
:23  %pvx_load_req = call i1 @_ssdm_op_ReadReq.m_axi.floatP(float* %pvx, i32 1)

ST_7: px_load_req [5/7] 8.75ns
:25  %px_load_req = call i1 @_ssdm_op_ReadReq.m_axi.floatP(float* %px, i32 1)

ST_7: pvy_load_req [6/7] 8.75ns
:31  %pvy_load_req = call i1 @_ssdm_op_ReadReq.m_axi.floatP(float* %pvy, i32 1)

ST_7: py_load_req [7/7] 8.75ns
:33  %py_load_req = call i1 @_ssdm_op_ReadReq.m_axi.floatP(float* %py, i32 1)


 <State 8>: 8.75ns
ST_8: pvx_load_req [3/7] 8.75ns
:23  %pvx_load_req = call i1 @_ssdm_op_ReadReq.m_axi.floatP(float* %pvx, i32 1)

ST_8: px_load_req [4/7] 8.75ns
:25  %px_load_req = call i1 @_ssdm_op_ReadReq.m_axi.floatP(float* %px, i32 1)

ST_8: pvy_load_req [5/7] 8.75ns
:31  %pvy_load_req = call i1 @_ssdm_op_ReadReq.m_axi.floatP(float* %pvy, i32 1)

ST_8: py_load_req [6/7] 8.75ns
:33  %py_load_req = call i1 @_ssdm_op_ReadReq.m_axi.floatP(float* %py, i32 1)


 <State 9>: 8.75ns
ST_9: pvx_load_req [2/7] 8.75ns
:23  %pvx_load_req = call i1 @_ssdm_op_ReadReq.m_axi.floatP(float* %pvx, i32 1)

ST_9: px_load_req [3/7] 8.75ns
:25  %px_load_req = call i1 @_ssdm_op_ReadReq.m_axi.floatP(float* %px, i32 1)

ST_9: pvy_load_req [4/7] 8.75ns
:31  %pvy_load_req = call i1 @_ssdm_op_ReadReq.m_axi.floatP(float* %pvy, i32 1)

ST_9: py_load_req [5/7] 8.75ns
:33  %py_load_req = call i1 @_ssdm_op_ReadReq.m_axi.floatP(float* %py, i32 1)


 <State 10>: 8.75ns
ST_10: pvx_load_req [1/7] 8.75ns
:23  %pvx_load_req = call i1 @_ssdm_op_ReadReq.m_axi.floatP(float* %pvx, i32 1)

ST_10: px_load_req [2/7] 8.75ns
:25  %px_load_req = call i1 @_ssdm_op_ReadReq.m_axi.floatP(float* %px, i32 1)

ST_10: pvy_load_req [3/7] 8.75ns
:31  %pvy_load_req = call i1 @_ssdm_op_ReadReq.m_axi.floatP(float* %pvy, i32 1)

ST_10: py_load_req [4/7] 8.75ns
:33  %py_load_req = call i1 @_ssdm_op_ReadReq.m_axi.floatP(float* %py, i32 1)


 <State 11>: 8.75ns
ST_11: pvx_read [1/1] 8.75ns
:24  %pvx_read = call float @_ssdm_op_Read.m_axi.floatP(float* %pvx)

ST_11: px_load_req [1/7] 8.75ns
:25  %px_load_req = call i1 @_ssdm_op_ReadReq.m_axi.floatP(float* %px, i32 1)

ST_11: pvy_load_req [2/7] 8.75ns
:31  %pvy_load_req = call i1 @_ssdm_op_ReadReq.m_axi.floatP(float* %pvy, i32 1)

ST_11: py_load_req [3/7] 8.75ns
:33  %py_load_req = call i1 @_ssdm_op_ReadReq.m_axi.floatP(float* %py, i32 1)


 <State 12>: 8.75ns
ST_12: px_read [1/1] 8.75ns
:26  %px_read = call float @_ssdm_op_Read.m_axi.floatP(float* %px)

ST_12: pvy_load_req [1/7] 8.75ns
:31  %pvy_load_req = call i1 @_ssdm_op_ReadReq.m_axi.floatP(float* %pvy, i32 1)

ST_12: py_load_req [2/7] 8.75ns
:33  %py_load_req = call i1 @_ssdm_op_ReadReq.m_axi.floatP(float* %py, i32 1)


 <State 13>: 8.75ns
ST_13: tmp_8 [5/5] 7.26ns
:27  %tmp_8 = fadd float %px_read, %pvx_read

ST_13: pvy_read [1/1] 8.75ns
:32  %pvy_read = call float @_ssdm_op_Read.m_axi.floatP(float* %pvy)

ST_13: py_load_req [1/7] 8.75ns
:33  %py_load_req = call i1 @_ssdm_op_ReadReq.m_axi.floatP(float* %py, i32 1)


 <State 14>: 8.75ns
ST_14: tmp_8 [4/5] 7.26ns
:27  %tmp_8 = fadd float %px_read, %pvx_read

ST_14: py_read [1/1] 8.75ns
:34  %py_read = call float @_ssdm_op_Read.m_axi.floatP(float* %py)


 <State 15>: 7.26ns
ST_15: tmp_8 [3/5] 7.26ns
:27  %tmp_8 = fadd float %px_read, %pvx_read

ST_15: tmp_9 [5/5] 7.26ns
:35  %tmp_9 = fadd float %py_read, %pvy_read


 <State 16>: 7.26ns
ST_16: tmp_8 [2/5] 7.26ns
:27  %tmp_8 = fadd float %px_read, %pvx_read

ST_16: tmp_9 [4/5] 7.26ns
:35  %tmp_9 = fadd float %py_read, %pvy_read


 <State 17>: 8.75ns
ST_17: tmp_8 [1/5] 7.26ns
:27  %tmp_8 = fadd float %px_read, %pvx_read

ST_17: px_req24 [1/1] 8.75ns
:28  %px_req24 = call i1 @_ssdm_op_WriteReq.m_axi.floatP(float* %px, i32 1)

ST_17: tmp_9 [3/5] 7.26ns
:35  %tmp_9 = fadd float %py_read, %pvy_read


 <State 18>: 8.75ns
ST_18: stg_224 [1/1] 8.75ns
:29  call void @_ssdm_op_Write.m_axi.floatP(float* %px, float %tmp_8, i4 -1)

ST_18: tmp_9 [2/5] 7.26ns
:35  %tmp_9 = fadd float %py_read, %pvy_read


 <State 19>: 8.75ns
ST_19: tmp_9 [1/5] 7.26ns
:35  %tmp_9 = fadd float %py_read, %pvy_read

ST_19: py_req20 [1/1] 8.75ns
:36  %py_req20 = call i1 @_ssdm_op_WriteReq.m_axi.floatP(float* %py, i32 1)


 <State 20>: 8.75ns
ST_20: px_resp25 [5/5] 8.75ns
:30  %px_resp25 = call i1 @_ssdm_op_WriteResp.m_axi.floatP(float* %px)

ST_20: stg_229 [1/1] 8.75ns
:37  call void @_ssdm_op_Write.m_axi.floatP(float* %py, float %tmp_9, i4 -1)


 <State 21>: 8.75ns
ST_21: px_resp25 [4/5] 8.75ns
:30  %px_resp25 = call i1 @_ssdm_op_WriteResp.m_axi.floatP(float* %px)

ST_21: py_resp21 [5/5] 8.75ns
:38  %py_resp21 = call i1 @_ssdm_op_WriteResp.m_axi.floatP(float* %py)


 <State 22>: 8.75ns
ST_22: px_resp25 [3/5] 8.75ns
:30  %px_resp25 = call i1 @_ssdm_op_WriteResp.m_axi.floatP(float* %px)

ST_22: py_resp21 [4/5] 8.75ns
:38  %py_resp21 = call i1 @_ssdm_op_WriteResp.m_axi.floatP(float* %py)


 <State 23>: 8.75ns
ST_23: px_resp25 [2/5] 8.75ns
:30  %px_resp25 = call i1 @_ssdm_op_WriteResp.m_axi.floatP(float* %px)

ST_23: py_resp21 [3/5] 8.75ns
:38  %py_resp21 = call i1 @_ssdm_op_WriteResp.m_axi.floatP(float* %py)


 <State 24>: 8.75ns
ST_24: px_resp25 [1/5] 8.75ns
:30  %px_resp25 = call i1 @_ssdm_op_WriteResp.m_axi.floatP(float* %px)

ST_24: py_resp21 [2/5] 8.75ns
:38  %py_resp21 = call i1 @_ssdm_op_WriteResp.m_axi.floatP(float* %py)

ST_24: tmp_12 [1/1] 6.79ns
:45  %tmp_12 = fcmp ole float %tmp_8, 0.000000e+00


 <State 25>: 8.75ns
ST_25: stg_239 [1/1] 0.00ns
:0  call void (...)* @_ssdm_op_SpecLoopName([19 x i8]* @p_str6) nounwind

ST_25: tmp_s [1/1] 0.00ns
:1  %tmp_s = call i32 (...)* @_ssdm_op_SpecRegionBegin([19 x i8]* @p_str6) nounwind

ST_25: stg_241 [1/1] 0.00ns
:2  call void (...)* @_ssdm_op_SpecPipeline(i32 -1, i32 1, i32 1, i32 0, [1 x i8]* @p_str3) nounwind

ST_25: stg_242 [1/1] 0.00ns
:3  call void (...)* @_ssdm_op_SpecLoopTripCount(i32 0, i32 12000, i32 12000, [1 x i8]* @p_str3) nounwind

ST_25: py_resp21 [1/5] 8.75ns
:38  %py_resp21 = call i1 @_ssdm_op_WriteResp.m_axi.floatP(float* %py)

ST_25: tmp_8_to_int [1/1] 0.00ns
:39  %tmp_8_to_int = bitcast float %tmp_8 to i32

ST_25: tmp_3 [1/1] 0.00ns
:40  %tmp_3 = call i8 @_ssdm_op_PartSelect.i8.i32.i32.i32(i32 %tmp_8_to_int, i32 23, i32 30)

ST_25: tmp_5 [1/1] 0.00ns
:41  %tmp_5 = trunc i32 %tmp_8_to_int to i23

ST_25: notlhs [1/1] 2.00ns
:42  %notlhs = icmp ne i8 %tmp_3, -1

ST_25: notrhs [1/1] 2.39ns
:43  %notrhs = icmp eq i23 %tmp_5, 0

ST_25: tmp_7 [1/1] 0.00ns (grouped into LUT with out node tmp_15)
:44  %tmp_7 = or i1 %notrhs, %notlhs

ST_25: tmp_15 [1/1] 1.37ns (out node of the LUT)
:46  %tmp_15 = and i1 %tmp_7, %tmp_12

ST_25: stg_251 [1/1] 1.57ns
:47  br i1 %tmp_15, label %3, label %._crit_edge

ST_25: px_req22 [1/1] 8.75ns
:0  %px_req22 = call i1 @_ssdm_op_WriteReq.m_axi.floatP(float* %px, i32 1)


 <State 26>: 8.75ns
ST_26: stg_253 [1/1] 8.75ns
:1  call void @_ssdm_op_Write.m_axi.floatP(float* %px, float 0.000000e+00, i4 -1)


 <State 27>: 8.75ns
ST_27: pvx_req16 [1/1] 8.75ns
:3  %pvx_req16 = call i1 @_ssdm_op_WriteReq.m_axi.floatP(float* %pvx, i32 1)


 <State 28>: 8.75ns
ST_28: px_resp23 [5/5] 8.75ns
:2  %px_resp23 = call i1 @_ssdm_op_WriteResp.m_axi.floatP(float* %px)

ST_28: stg_256 [1/1] 8.75ns
:4  call void @_ssdm_op_Write.m_axi.floatP(float* %pvx, float 0.000000e+00, i4 -1)


 <State 29>: 8.75ns
ST_29: px_resp23 [4/5] 8.75ns
:2  %px_resp23 = call i1 @_ssdm_op_WriteResp.m_axi.floatP(float* %px)

ST_29: pvx_resp17 [5/5] 8.75ns
:5  %pvx_resp17 = call i1 @_ssdm_op_WriteResp.m_axi.floatP(float* %pvx)


 <State 30>: 8.75ns
ST_30: px_resp23 [3/5] 8.75ns
:2  %px_resp23 = call i1 @_ssdm_op_WriteResp.m_axi.floatP(float* %px)

ST_30: pvx_resp17 [4/5] 8.75ns
:5  %pvx_resp17 = call i1 @_ssdm_op_WriteResp.m_axi.floatP(float* %pvx)


 <State 31>: 8.75ns
ST_31: px_resp23 [2/5] 8.75ns
:2  %px_resp23 = call i1 @_ssdm_op_WriteResp.m_axi.floatP(float* %px)

ST_31: pvx_resp17 [3/5] 8.75ns
:5  %pvx_resp17 = call i1 @_ssdm_op_WriteResp.m_axi.floatP(float* %pvx)


 <State 32>: 8.75ns
ST_32: px_resp23 [1/5] 8.75ns
:2  %px_resp23 = call i1 @_ssdm_op_WriteResp.m_axi.floatP(float* %px)

ST_32: pvx_resp17 [2/5] 8.75ns
:5  %pvx_resp17 = call i1 @_ssdm_op_WriteResp.m_axi.floatP(float* %pvx)


 <State 33>: 8.75ns
ST_33: pvx_resp17 [1/5] 8.75ns
:5  %pvx_resp17 = call i1 @_ssdm_op_WriteResp.m_axi.floatP(float* %pvx)

ST_33: stg_266 [1/1] 1.57ns
:6  br label %._crit_edge

ST_33: tmp_29 [1/1] 6.79ns
._crit_edge:8  %tmp_29 = fcmp ole float %tmp_9, 0.000000e+00


 <State 34>: 8.75ns
ST_34: tmp_10 [1/1] 0.00ns
._crit_edge:0  %tmp_10 = phi float [ 0.000000e+00, %3 ], [ %pvx_read, %2 ]

ST_34: tmp_11 [1/1] 0.00ns
._crit_edge:1  %tmp_11 = phi float [ 0.000000e+00, %3 ], [ %tmp_8, %2 ]

ST_34: tmp_9_to_int [1/1] 0.00ns
._crit_edge:2  %tmp_9_to_int = bitcast float %tmp_9 to i32

ST_34: tmp_18 [1/1] 0.00ns
._crit_edge:3  %tmp_18 = call i8 @_ssdm_op_PartSelect.i8.i32.i32.i32(i32 %tmp_9_to_int, i32 23, i32 30)

ST_34: tmp_26 [1/1] 0.00ns
._crit_edge:4  %tmp_26 = trunc i32 %tmp_9_to_int to i23

ST_34: notlhs7 [1/1] 2.00ns
._crit_edge:5  %notlhs7 = icmp ne i8 %tmp_18, -1

ST_34: notrhs8 [1/1] 2.39ns
._crit_edge:6  %notrhs8 = icmp eq i23 %tmp_26, 0

ST_34: tmp_28 [1/1] 0.00ns (grouped into LUT with out node tmp_32)
._crit_edge:7  %tmp_28 = or i1 %notrhs8, %notlhs7

ST_34: tmp_32 [1/1] 1.37ns (out node of the LUT)
._crit_edge:9  %tmp_32 = and i1 %tmp_28, %tmp_29

ST_34: stg_277 [1/1] 1.57ns
._crit_edge:10  br i1 %tmp_32, label %4, label %._crit_edge2

ST_34: py_req18 [1/1] 8.75ns
:0  %py_req18 = call i1 @_ssdm_op_WriteReq.m_axi.floatP(float* %py, i32 1)


 <State 35>: 8.75ns
ST_35: stg_279 [1/1] 8.75ns
:1  call void @_ssdm_op_Write.m_axi.floatP(float* %py, float 0.000000e+00, i4 -1)


 <State 36>: 8.75ns
ST_36: pvy_req12 [1/1] 8.75ns
:3  %pvy_req12 = call i1 @_ssdm_op_WriteReq.m_axi.floatP(float* %pvy, i32 1)


 <State 37>: 8.75ns
ST_37: py_resp19 [5/5] 8.75ns
:2  %py_resp19 = call i1 @_ssdm_op_WriteResp.m_axi.floatP(float* %py)

ST_37: stg_282 [1/1] 8.75ns
:4  call void @_ssdm_op_Write.m_axi.floatP(float* %pvy, float 0.000000e+00, i4 -1)


 <State 38>: 8.75ns
ST_38: py_resp19 [4/5] 8.75ns
:2  %py_resp19 = call i1 @_ssdm_op_WriteResp.m_axi.floatP(float* %py)

ST_38: pvy_resp13 [5/5] 8.75ns
:5  %pvy_resp13 = call i1 @_ssdm_op_WriteResp.m_axi.floatP(float* %pvy)


 <State 39>: 8.75ns
ST_39: py_resp19 [3/5] 8.75ns
:2  %py_resp19 = call i1 @_ssdm_op_WriteResp.m_axi.floatP(float* %py)

ST_39: pvy_resp13 [4/5] 8.75ns
:5  %pvy_resp13 = call i1 @_ssdm_op_WriteResp.m_axi.floatP(float* %pvy)


 <State 40>: 8.75ns
ST_40: py_resp19 [2/5] 8.75ns
:2  %py_resp19 = call i1 @_ssdm_op_WriteResp.m_axi.floatP(float* %py)

ST_40: pvy_resp13 [3/5] 8.75ns
:5  %pvy_resp13 = call i1 @_ssdm_op_WriteResp.m_axi.floatP(float* %pvy)


 <State 41>: 8.75ns
ST_41: py_resp19 [1/5] 8.75ns
:2  %py_resp19 = call i1 @_ssdm_op_WriteResp.m_axi.floatP(float* %py)

ST_41: pvy_resp13 [2/5] 8.75ns
:5  %pvy_resp13 = call i1 @_ssdm_op_WriteResp.m_axi.floatP(float* %pvy)


 <State 42>: 8.75ns
ST_42: pvy_resp13 [1/5] 8.75ns
:5  %pvy_resp13 = call i1 @_ssdm_op_WriteResp.m_axi.floatP(float* %pvy)

ST_42: stg_292 [1/1] 1.57ns
:6  br label %._crit_edge2

ST_42: tmp_44 [1/1] 6.79ns
._crit_edge2:8  %tmp_44 = fcmp oge float %tmp_11, 1.440000e+03


 <State 43>: 8.75ns
ST_43: tmp_13 [1/1] 0.00ns
._crit_edge2:0  %tmp_13 = phi float [ 0.000000e+00, %4 ], [ %pvy_read, %._crit_edge ]

ST_43: tmp_14 [1/1] 0.00ns
._crit_edge2:1  %tmp_14 = phi float [ 0.000000e+00, %4 ], [ %tmp_9, %._crit_edge ]

ST_43: tmp_11_to_int [1/1] 0.00ns
._crit_edge2:2  %tmp_11_to_int = bitcast float %tmp_11 to i32

ST_43: tmp_33 [1/1] 0.00ns
._crit_edge2:3  %tmp_33 = call i8 @_ssdm_op_PartSelect.i8.i32.i32.i32(i32 %tmp_11_to_int, i32 23, i32 30)

ST_43: tmp_41 [1/1] 0.00ns
._crit_edge2:4  %tmp_41 = trunc i32 %tmp_11_to_int to i23

ST_43: notlhs9 [1/1] 2.00ns
._crit_edge2:5  %notlhs9 = icmp ne i8 %tmp_33, -1

ST_43: notrhs1 [1/1] 2.39ns
._crit_edge2:6  %notrhs1 = icmp eq i23 %tmp_41, 0

ST_43: tmp_43 [1/1] 0.00ns (grouped into LUT with out node tmp_45)
._crit_edge2:7  %tmp_43 = or i1 %notrhs1, %notlhs9

ST_43: tmp_45 [1/1] 1.37ns (out node of the LUT)
._crit_edge2:9  %tmp_45 = and i1 %tmp_43, %tmp_44

ST_43: stg_303 [1/1] 1.57ns
._crit_edge2:10  br i1 %tmp_45, label %5, label %._crit_edge3

ST_43: px_req [1/1] 8.75ns
:0  %px_req = call i1 @_ssdm_op_WriteReq.m_axi.floatP(float* %px, i32 1)


 <State 44>: 8.75ns
ST_44: stg_305 [1/1] 8.75ns
:1  call void @_ssdm_op_Write.m_axi.floatP(float* %px, float 1.440000e+03, i4 -1)


 <State 45>: 8.75ns
ST_45: px_resp [5/5] 8.75ns
:2  %px_resp = call i1 @_ssdm_op_WriteResp.m_axi.floatP(float* %px)

ST_45: pvx_req14 [1/1] 8.75ns
:3  %pvx_req14 = call i1 @_ssdm_op_WriteReq.m_axi.floatP(float* %pvx, i32 1)


 <State 46>: 8.75ns
ST_46: px_resp [4/5] 8.75ns
:2  %px_resp = call i1 @_ssdm_op_WriteResp.m_axi.floatP(float* %px)

ST_46: stg_309 [1/1] 8.75ns
:4  call void @_ssdm_op_Write.m_axi.floatP(float* %pvx, float 0.000000e+00, i4 -1)


 <State 47>: 8.75ns
ST_47: px_resp [3/5] 8.75ns
:2  %px_resp = call i1 @_ssdm_op_WriteResp.m_axi.floatP(float* %px)

ST_47: pvx_resp15 [5/5] 8.75ns
:5  %pvx_resp15 = call i1 @_ssdm_op_WriteResp.m_axi.floatP(float* %pvx)


 <State 48>: 8.75ns
ST_48: px_resp [2/5] 8.75ns
:2  %px_resp = call i1 @_ssdm_op_WriteResp.m_axi.floatP(float* %px)

ST_48: pvx_resp15 [4/5] 8.75ns
:5  %pvx_resp15 = call i1 @_ssdm_op_WriteResp.m_axi.floatP(float* %pvx)


 <State 49>: 8.75ns
ST_49: px_resp [1/5] 8.75ns
:2  %px_resp = call i1 @_ssdm_op_WriteResp.m_axi.floatP(float* %px)

ST_49: pvx_resp15 [3/5] 8.75ns
:5  %pvx_resp15 = call i1 @_ssdm_op_WriteResp.m_axi.floatP(float* %pvx)


 <State 50>: 8.75ns
ST_50: pvx_resp15 [2/5] 8.75ns
:5  %pvx_resp15 = call i1 @_ssdm_op_WriteResp.m_axi.floatP(float* %pvx)


 <State 51>: 8.75ns
ST_51: pvx_resp15 [1/5] 8.75ns
:5  %pvx_resp15 = call i1 @_ssdm_op_WriteResp.m_axi.floatP(float* %pvx)

ST_51: stg_318 [1/1] 1.57ns
:6  br label %._crit_edge3

ST_51: tmp_49 [1/1] 6.79ns
._crit_edge3:8  %tmp_49 = fcmp oge float %tmp_14, 9.000000e+02


 <State 52>: 8.75ns
ST_52: tmp_16 [1/1] 0.00ns
._crit_edge3:0  %tmp_16 = phi float [ 0.000000e+00, %5 ], [ %tmp_10, %._crit_edge2 ]

ST_52: tmp_17 [1/1] 0.00ns
._crit_edge3:1  %tmp_17 = phi float [ 1.440000e+03, %5 ], [ %tmp_11, %._crit_edge2 ]

ST_52: tmp_14_to_int [1/1] 0.00ns
._crit_edge3:2  %tmp_14_to_int = bitcast float %tmp_14 to i32

ST_52: tmp_46 [1/1] 0.00ns
._crit_edge3:3  %tmp_46 = call i8 @_ssdm_op_PartSelect.i8.i32.i32.i32(i32 %tmp_14_to_int, i32 23, i32 30)

ST_52: tmp_47 [1/1] 0.00ns
._crit_edge3:4  %tmp_47 = trunc i32 %tmp_14_to_int to i23

ST_52: notlhs1 [1/1] 2.00ns
._crit_edge3:5  %notlhs1 = icmp ne i8 %tmp_46, -1

ST_52: notrhs2 [1/1] 2.39ns
._crit_edge3:6  %notrhs2 = icmp eq i23 %tmp_47, 0

ST_52: tmp_48 [1/1] 0.00ns (grouped into LUT with out node tmp_50)
._crit_edge3:7  %tmp_48 = or i1 %notrhs2, %notlhs1

ST_52: tmp_50 [1/1] 1.37ns (out node of the LUT)
._crit_edge3:9  %tmp_50 = and i1 %tmp_48, %tmp_49

ST_52: stg_329 [1/1] 1.57ns
._crit_edge3:10  br i1 %tmp_50, label %6, label %._crit_edge4

ST_52: py_req [1/1] 8.75ns
:0  %py_req = call i1 @_ssdm_op_WriteReq.m_axi.floatP(float* %py, i32 1)


 <State 53>: 8.75ns
ST_53: stg_331 [1/1] 8.75ns
:1  call void @_ssdm_op_Write.m_axi.floatP(float* %py, float 9.000000e+02, i4 -1)


 <State 54>: 8.75ns
ST_54: py_resp [5/5] 8.75ns
:2  %py_resp = call i1 @_ssdm_op_WriteResp.m_axi.floatP(float* %py)

ST_54: pvy_req10 [1/1] 8.75ns
:3  %pvy_req10 = call i1 @_ssdm_op_WriteReq.m_axi.floatP(float* %pvy, i32 1)


 <State 55>: 8.75ns
ST_55: py_resp [4/5] 8.75ns
:2  %py_resp = call i1 @_ssdm_op_WriteResp.m_axi.floatP(float* %py)

ST_55: stg_335 [1/1] 8.75ns
:4  call void @_ssdm_op_Write.m_axi.floatP(float* %pvy, float 0.000000e+00, i4 -1)


 <State 56>: 8.75ns
ST_56: py_resp [3/5] 8.75ns
:2  %py_resp = call i1 @_ssdm_op_WriteResp.m_axi.floatP(float* %py)

ST_56: pvy_resp11 [5/5] 8.75ns
:5  %pvy_resp11 = call i1 @_ssdm_op_WriteResp.m_axi.floatP(float* %pvy)


 <State 57>: 8.75ns
ST_57: py_resp [2/5] 8.75ns
:2  %py_resp = call i1 @_ssdm_op_WriteResp.m_axi.floatP(float* %py)

ST_57: pvy_resp11 [4/5] 8.75ns
:5  %pvy_resp11 = call i1 @_ssdm_op_WriteResp.m_axi.floatP(float* %pvy)


 <State 58>: 8.75ns
ST_58: py_resp [1/5] 8.75ns
:2  %py_resp = call i1 @_ssdm_op_WriteResp.m_axi.floatP(float* %py)

ST_58: pvy_resp11 [3/5] 8.75ns
:5  %pvy_resp11 = call i1 @_ssdm_op_WriteResp.m_axi.floatP(float* %pvy)


 <State 59>: 8.75ns
ST_59: pvy_resp11 [2/5] 8.75ns
:5  %pvy_resp11 = call i1 @_ssdm_op_WriteResp.m_axi.floatP(float* %pvy)


 <State 60>: 8.75ns
ST_60: pvy_resp11 [1/5] 8.75ns
:5  %pvy_resp11 = call i1 @_ssdm_op_WriteResp.m_axi.floatP(float* %pvy)

ST_60: stg_344 [1/1] 1.57ns
:6  br label %._crit_edge4

ST_60: tmp_19 [1/1] 0.00ns
._crit_edge4:0  %tmp_19 = phi float [ 0.000000e+00, %6 ], [ %tmp_13, %._crit_edge3 ]

ST_60: tmp_20 [1/1] 0.00ns
._crit_edge4:1  %tmp_20 = phi float [ 9.000000e+02, %6 ], [ %tmp_14, %._crit_edge3 ]

ST_60: numberAttractors_load [1/1] 0.00ns
._crit_edge4:2  %numberAttractors_load = load i32* @numberAttractors, align 4

ST_60: tmp_51 [1/1] 0.00ns
._crit_edge4:3  %tmp_51 = shl i32 %numberAttractors_load, 2

ST_60: tmp_21 [1/1] 1.97ns
._crit_edge4:4  %tmp_21 = sub i32 %tmp_51, %numberAttractors_load

ST_60: loopend_1 [1/1] 1.97ns
._crit_edge4:5  %loopend_1 = add i32 48000, %tmp_21

ST_60: stg_351 [1/1] 1.57ns
._crit_edge4:6  br label %7


 <State 61>: 4.88ns
ST_61: j [1/1] 0.00ns
:2  %j = phi i32 [ 48000, %._crit_edge4 ], [ %j_1, %._crit_edge5 ]

ST_61: tmp_24 [1/1] 2.52ns
:3  %tmp_24 = icmp slt i32 %j, %loopend_1

ST_61: tmp_25 [1/1] 2.44ns
:4  %tmp_25 = add nsw i32 1, %j

ST_61: tmp_26_cast [1/1] 0.00ns
:5  %tmp_26_cast = sext i32 %tmp_25 to i33

ST_61: ram2_sum6 [1/1] 2.44ns
:6  %ram2_sum6 = add i33 %tmp_62_cast, %tmp_26_cast

ST_61: ram2_sum6_cast [1/1] 0.00ns
:7  %ram2_sum6_cast = sext i33 %ram2_sum6 to i64

ST_61: MAXI_addr [1/1] 0.00ns
:8  %MAXI_addr = getelementptr inbounds float* %MAXI, i64 %ram2_sum6_cast


 <State 62>: 8.75ns
ST_62: ax_req [7/7] 8.75ns
:9  %ax_req = call i1 @_ssdm_op_ReadReq.m_axi.floatP(float* %MAXI_addr, i32 1)

ST_62: tmp_27 [1/1] 2.44ns
:11  %tmp_27 = add nsw i32 2, %j

ST_62: tmp_28_cast [1/1] 0.00ns
:12  %tmp_28_cast = sext i32 %tmp_27 to i33

ST_62: ram2_sum7 [1/1] 2.44ns
:13  %ram2_sum7 = add i33 %tmp_62_cast, %tmp_28_cast

ST_62: ram2_sum7_cast [1/1] 0.00ns
:14  %ram2_sum7_cast = sext i33 %ram2_sum7 to i64

ST_62: MAXI_addr_1 [1/1] 0.00ns
:15  %MAXI_addr_1 = getelementptr inbounds float* %MAXI, i64 %ram2_sum7_cast

ST_62: j_1 [1/1] 2.44ns
:18  %j_1 = add nsw i32 3, %j

ST_62: tmp_29_cast [1/1] 0.00ns
:19  %tmp_29_cast = sext i32 %j_1 to i33

ST_62: ram2_sum8 [1/1] 2.44ns
:20  %ram2_sum8 = add i33 %tmp_62_cast, %tmp_29_cast

ST_62: ram2_sum8_cast [1/1] 0.00ns
:21  %ram2_sum8_cast = sext i33 %ram2_sum8 to i64

ST_62: MAXI_addr_2 [1/1] 0.00ns
:22  %MAXI_addr_2 = getelementptr inbounds float* %MAXI, i64 %ram2_sum8_cast


 <State 63>: 8.75ns
ST_63: ax_req [6/7] 8.75ns
:9  %ax_req = call i1 @_ssdm_op_ReadReq.m_axi.floatP(float* %MAXI_addr, i32 1)

ST_63: ay_req [7/7] 8.75ns
:16  %ay_req = call i1 @_ssdm_op_ReadReq.m_axi.floatP(float* %MAXI_addr_1, i32 1)


 <State 64>: 8.75ns
ST_64: ax_req [5/7] 8.75ns
:9  %ax_req = call i1 @_ssdm_op_ReadReq.m_axi.floatP(float* %MAXI_addr, i32 1)

ST_64: ay_req [6/7] 8.75ns
:16  %ay_req = call i1 @_ssdm_op_ReadReq.m_axi.floatP(float* %MAXI_addr_1, i32 1)

ST_64: g_req [7/7] 8.75ns
:23  %g_req = call i1 @_ssdm_op_ReadReq.m_axi.floatP(float* %MAXI_addr_2, i32 1)


 <State 65>: 8.75ns
ST_65: ax_req [4/7] 8.75ns
:9  %ax_req = call i1 @_ssdm_op_ReadReq.m_axi.floatP(float* %MAXI_addr, i32 1)

ST_65: ay_req [5/7] 8.75ns
:16  %ay_req = call i1 @_ssdm_op_ReadReq.m_axi.floatP(float* %MAXI_addr_1, i32 1)

ST_65: g_req [6/7] 8.75ns
:23  %g_req = call i1 @_ssdm_op_ReadReq.m_axi.floatP(float* %MAXI_addr_2, i32 1)


 <State 66>: 8.75ns
ST_66: ax_req [3/7] 8.75ns
:9  %ax_req = call i1 @_ssdm_op_ReadReq.m_axi.floatP(float* %MAXI_addr, i32 1)

ST_66: ay_req [4/7] 8.75ns
:16  %ay_req = call i1 @_ssdm_op_ReadReq.m_axi.floatP(float* %MAXI_addr_1, i32 1)

ST_66: g_req [5/7] 8.75ns
:23  %g_req = call i1 @_ssdm_op_ReadReq.m_axi.floatP(float* %MAXI_addr_2, i32 1)


 <State 67>: 8.75ns
ST_67: ax_req [2/7] 8.75ns
:9  %ax_req = call i1 @_ssdm_op_ReadReq.m_axi.floatP(float* %MAXI_addr, i32 1)

ST_67: ay_req [3/7] 8.75ns
:16  %ay_req = call i1 @_ssdm_op_ReadReq.m_axi.floatP(float* %MAXI_addr_1, i32 1)

ST_67: g_req [4/7] 8.75ns
:23  %g_req = call i1 @_ssdm_op_ReadReq.m_axi.floatP(float* %MAXI_addr_2, i32 1)


 <State 68>: 8.75ns
ST_68: ax_req [1/7] 8.75ns
:9  %ax_req = call i1 @_ssdm_op_ReadReq.m_axi.floatP(float* %MAXI_addr, i32 1)

ST_68: ay_req [2/7] 8.75ns
:16  %ay_req = call i1 @_ssdm_op_ReadReq.m_axi.floatP(float* %MAXI_addr_1, i32 1)

ST_68: g_req [3/7] 8.75ns
:23  %g_req = call i1 @_ssdm_op_ReadReq.m_axi.floatP(float* %MAXI_addr_2, i32 1)


 <State 69>: 8.75ns
ST_69: ax [1/1] 8.75ns
:10  %ax = call float @_ssdm_op_Read.m_axi.floatP(float* %MAXI_addr)

ST_69: ay_req [1/7] 8.75ns
:16  %ay_req = call i1 @_ssdm_op_ReadReq.m_axi.floatP(float* %MAXI_addr_1, i32 1)

ST_69: g_req [2/7] 8.75ns
:23  %g_req = call i1 @_ssdm_op_ReadReq.m_axi.floatP(float* %MAXI_addr_2, i32 1)


 <State 70>: 8.75ns
ST_70: ay [1/1] 8.75ns
:17  %ay = call float @_ssdm_op_Read.m_axi.floatP(float* %MAXI_addr_1)

ST_70: g_req [1/7] 8.75ns
:23  %g_req = call i1 @_ssdm_op_ReadReq.m_axi.floatP(float* %MAXI_addr_2, i32 1)

ST_70: exp1 [5/5] 7.26ns
:25  %exp1 = fsub float %ax, %tmp_17


 <State 71>: 8.75ns
ST_71: g [1/1] 8.75ns
:24  %g = call float @_ssdm_op_Read.m_axi.floatP(float* %MAXI_addr_2)

ST_71: exp1 [4/5] 7.26ns
:25  %exp1 = fsub float %ax, %tmp_17

ST_71: exp2 [5/5] 7.26ns
:26  %exp2 = fsub float %ay, %tmp_20


 <State 72>: 7.26ns
ST_72: exp1 [3/5] 7.26ns
:25  %exp1 = fsub float %ax, %tmp_17

ST_72: exp2 [4/5] 7.26ns
:26  %exp2 = fsub float %ay, %tmp_20


 <State 73>: 7.26ns
ST_73: exp1 [2/5] 7.26ns
:25  %exp1 = fsub float %ax, %tmp_17

ST_73: exp2 [3/5] 7.26ns
:26  %exp2 = fsub float %ay, %tmp_20


 <State 74>: 7.26ns
ST_74: exp1 [1/5] 7.26ns
:25  %exp1 = fsub float %ax, %tmp_17

ST_74: exp2 [2/5] 7.26ns
:26  %exp2 = fsub float %ay, %tmp_20


 <State 75>: 7.26ns
ST_75: exp2 [1/5] 7.26ns
:26  %exp2 = fsub float %ay, %tmp_20

ST_75: tmp_30 [4/4] 5.70ns
:27  %tmp_30 = fmul float %exp1, %exp1


 <State 76>: 5.70ns
ST_76: tmp_30 [3/4] 5.70ns
:27  %tmp_30 = fmul float %exp1, %exp1

ST_76: tmp_31 [4/4] 5.70ns
:28  %tmp_31 = fmul float %exp2, %exp2


 <State 77>: 5.70ns
ST_77: tmp_30 [2/4] 5.70ns
:27  %tmp_30 = fmul float %exp1, %exp1

ST_77: tmp_31 [3/4] 5.70ns
:28  %tmp_31 = fmul float %exp2, %exp2


 <State 78>: 5.70ns
ST_78: tmp_30 [1/4] 5.70ns
:27  %tmp_30 = fmul float %exp1, %exp1

ST_78: tmp_31 [2/4] 5.70ns
:28  %tmp_31 = fmul float %exp2, %exp2


 <State 79>: 5.70ns
ST_79: tmp_31 [1/4] 5.70ns
:28  %tmp_31 = fmul float %exp2, %exp2


 <State 80>: 7.26ns
ST_80: exp [5/5] 7.26ns
:29  %exp = fadd float %tmp_30, %tmp_31


 <State 81>: 7.26ns
ST_81: exp [4/5] 7.26ns
:29  %exp = fadd float %tmp_30, %tmp_31


 <State 82>: 7.26ns
ST_82: exp [3/5] 7.26ns
:29  %exp = fadd float %tmp_30, %tmp_31


 <State 83>: 7.26ns
ST_83: exp [2/5] 7.26ns
:29  %exp = fadd float %tmp_30, %tmp_31


 <State 84>: 7.26ns
ST_84: exp [1/5] 7.26ns
:29  %exp = fadd float %tmp_30, %tmp_31


 <State 85>: 8.13ns
ST_85: d [12/12] 8.13ns
:30  %d = call float @llvm.sqrt.f32(float %exp)


 <State 86>: 8.13ns
ST_86: d [11/12] 8.13ns
:30  %d = call float @llvm.sqrt.f32(float %exp)


 <State 87>: 8.13ns
ST_87: d [10/12] 8.13ns
:30  %d = call float @llvm.sqrt.f32(float %exp)


 <State 88>: 8.13ns
ST_88: d [9/12] 8.13ns
:30  %d = call float @llvm.sqrt.f32(float %exp)


 <State 89>: 8.13ns
ST_89: d [8/12] 8.13ns
:30  %d = call float @llvm.sqrt.f32(float %exp)


 <State 90>: 8.13ns
ST_90: d [7/12] 8.13ns
:30  %d = call float @llvm.sqrt.f32(float %exp)


 <State 91>: 8.13ns
ST_91: d [6/12] 8.13ns
:30  %d = call float @llvm.sqrt.f32(float %exp)


 <State 92>: 8.13ns
ST_92: d [5/12] 8.13ns
:30  %d = call float @llvm.sqrt.f32(float %exp)


 <State 93>: 8.13ns
ST_93: d [4/12] 8.13ns
:30  %d = call float @llvm.sqrt.f32(float %exp)


 <State 94>: 8.13ns
ST_94: d [3/12] 8.13ns
:30  %d = call float @llvm.sqrt.f32(float %exp)


 <State 95>: 8.13ns
ST_95: d [2/12] 8.13ns
:30  %d = call float @llvm.sqrt.f32(float %exp)


 <State 96>: 8.13ns
ST_96: d [1/12] 8.13ns
:30  %d = call float @llvm.sqrt.f32(float %exp)


 <State 97>: 9.53ns
ST_97: d_to_int [1/1] 0.00ns
:31  %d_to_int = bitcast float %d to i32

ST_97: tmp_52 [1/1] 0.00ns
:32  %tmp_52 = call i8 @_ssdm_op_PartSelect.i8.i32.i32.i32(i32 %d_to_int, i32 23, i32 30)

ST_97: tmp_53 [1/1] 0.00ns
:33  %tmp_53 = trunc i32 %d_to_int to i23

ST_97: notlhs2 [1/1] 2.00ns
:34  %notlhs2 = icmp ne i8 %tmp_52, -1

ST_97: notrhs3 [1/1] 2.39ns
:35  %notrhs3 = icmp eq i23 %tmp_53, 0

ST_97: tmp_54 [1/1] 0.00ns (grouped into LUT with out node tmp_56)
:36  %tmp_54 = or i1 %notrhs3, %notlhs2

ST_97: tmp_55 [1/1] 6.79ns
:37  %tmp_55 = fcmp olt float %d, 5.000000e+02

ST_97: tmp_56 [1/1] 1.37ns (out node of the LUT)
:38  %tmp_56 = and i1 %tmp_54, %tmp_55

ST_97: x_norm [16/16] 6.08ns
:0  %x_norm = fdiv float %exp1, %d


 <State 98>: 6.79ns
ST_98: x_norm [15/16] 6.08ns
:0  %x_norm = fdiv float %exp1, %d

ST_98: y_norm [16/16] 6.08ns
:1  %y_norm = fdiv float %exp2, %d

ST_98: tmp_57 [1/1] 6.79ns
:2  %tmp_57 = fcmp olt float %d, 1.000000e+00


 <State 99>: 6.08ns
ST_99: x_norm [14/16] 6.08ns
:0  %x_norm = fdiv float %exp1, %d

ST_99: y_norm [15/16] 6.08ns
:1  %y_norm = fdiv float %exp2, %d

ST_99: tmp_34 [16/16] 6.08ns
:0  %tmp_34 = fdiv float 1.000000e+00, %d


 <State 100>: 6.08ns
ST_100: x_norm [13/16] 6.08ns
:0  %x_norm = fdiv float %exp1, %d

ST_100: y_norm [14/16] 6.08ns
:1  %y_norm = fdiv float %exp2, %d

ST_100: tmp_34 [15/16] 6.08ns
:0  %tmp_34 = fdiv float 1.000000e+00, %d


 <State 101>: 6.08ns
ST_101: x_norm [12/16] 6.08ns
:0  %x_norm = fdiv float %exp1, %d

ST_101: y_norm [13/16] 6.08ns
:1  %y_norm = fdiv float %exp2, %d

ST_101: tmp_34 [14/16] 6.08ns
:0  %tmp_34 = fdiv float 1.000000e+00, %d


 <State 102>: 6.08ns
ST_102: x_norm [11/16] 6.08ns
:0  %x_norm = fdiv float %exp1, %d

ST_102: y_norm [12/16] 6.08ns
:1  %y_norm = fdiv float %exp2, %d

ST_102: tmp_34 [13/16] 6.08ns
:0  %tmp_34 = fdiv float 1.000000e+00, %d


 <State 103>: 6.08ns
ST_103: x_norm [10/16] 6.08ns
:0  %x_norm = fdiv float %exp1, %d

ST_103: y_norm [11/16] 6.08ns
:1  %y_norm = fdiv float %exp2, %d

ST_103: tmp_34 [12/16] 6.08ns
:0  %tmp_34 = fdiv float 1.000000e+00, %d


 <State 104>: 6.08ns
ST_104: x_norm [9/16] 6.08ns
:0  %x_norm = fdiv float %exp1, %d

ST_104: y_norm [10/16] 6.08ns
:1  %y_norm = fdiv float %exp2, %d

ST_104: tmp_34 [11/16] 6.08ns
:0  %tmp_34 = fdiv float 1.000000e+00, %d


 <State 105>: 6.08ns
ST_105: x_norm [8/16] 6.08ns
:0  %x_norm = fdiv float %exp1, %d

ST_105: y_norm [9/16] 6.08ns
:1  %y_norm = fdiv float %exp2, %d

ST_105: tmp_34 [10/16] 6.08ns
:0  %tmp_34 = fdiv float 1.000000e+00, %d


 <State 106>: 6.08ns
ST_106: x_norm [7/16] 6.08ns
:0  %x_norm = fdiv float %exp1, %d

ST_106: y_norm [8/16] 6.08ns
:1  %y_norm = fdiv float %exp2, %d

ST_106: tmp_34 [9/16] 6.08ns
:0  %tmp_34 = fdiv float 1.000000e+00, %d


 <State 107>: 6.08ns
ST_107: x_norm [6/16] 6.08ns
:0  %x_norm = fdiv float %exp1, %d

ST_107: y_norm [7/16] 6.08ns
:1  %y_norm = fdiv float %exp2, %d

ST_107: tmp_34 [8/16] 6.08ns
:0  %tmp_34 = fdiv float 1.000000e+00, %d


 <State 108>: 6.08ns
ST_108: x_norm [5/16] 6.08ns
:0  %x_norm = fdiv float %exp1, %d

ST_108: y_norm [6/16] 6.08ns
:1  %y_norm = fdiv float %exp2, %d

ST_108: tmp_34 [7/16] 6.08ns
:0  %tmp_34 = fdiv float 1.000000e+00, %d


 <State 109>: 6.08ns
ST_109: x_norm [4/16] 6.08ns
:0  %x_norm = fdiv float %exp1, %d

ST_109: y_norm [5/16] 6.08ns
:1  %y_norm = fdiv float %exp2, %d

ST_109: tmp_34 [6/16] 6.08ns
:0  %tmp_34 = fdiv float 1.000000e+00, %d


 <State 110>: 6.08ns
ST_110: x_norm [3/16] 6.08ns
:0  %x_norm = fdiv float %exp1, %d

ST_110: y_norm [4/16] 6.08ns
:1  %y_norm = fdiv float %exp2, %d

ST_110: tmp_34 [5/16] 6.08ns
:0  %tmp_34 = fdiv float 1.000000e+00, %d


 <State 111>: 6.08ns
ST_111: x_norm [2/16] 6.08ns
:0  %x_norm = fdiv float %exp1, %d

ST_111: y_norm [3/16] 6.08ns
:1  %y_norm = fdiv float %exp2, %d

ST_111: tmp_34 [4/16] 6.08ns
:0  %tmp_34 = fdiv float 1.000000e+00, %d


 <State 112>: 6.08ns
ST_112: x_norm [1/16] 6.08ns
:0  %x_norm = fdiv float %exp1, %d

ST_112: y_norm [2/16] 6.08ns
:1  %y_norm = fdiv float %exp2, %d

ST_112: tmp_34 [3/16] 6.08ns
:0  %tmp_34 = fdiv float 1.000000e+00, %d


 <State 113>: 7.65ns
ST_113: y_norm [1/16] 6.08ns
:1  %y_norm = fdiv float %exp2, %d

ST_113: stg_483 [1/1] 1.57ns
:3  br i1 %tmp_57, label %._crit_edge6, label %10

ST_113: tmp_34 [2/16] 6.08ns
:0  %tmp_34 = fdiv float 1.000000e+00, %d


 <State 114>: 6.08ns
ST_114: tmp_34 [1/16] 6.08ns
:0  %tmp_34 = fdiv float 1.000000e+00, %d


 <State 115>: 5.70ns
ST_115: tmp_35 [4/4] 5.70ns
:1  %tmp_35 = fmul float %x_norm, %tmp_34


 <State 116>: 5.70ns
ST_116: tmp_35 [3/4] 5.70ns
:1  %tmp_35 = fmul float %x_norm, %tmp_34

ST_116: tmp_36 [4/4] 5.70ns
:2  %tmp_36 = fmul float %y_norm, %tmp_34


 <State 117>: 5.70ns
ST_117: tmp_35 [2/4] 5.70ns
:1  %tmp_35 = fmul float %x_norm, %tmp_34

ST_117: tmp_36 [3/4] 5.70ns
:2  %tmp_36 = fmul float %y_norm, %tmp_34


 <State 118>: 5.70ns
ST_118: tmp_35 [1/4] 5.70ns
:1  %tmp_35 = fmul float %x_norm, %tmp_34

ST_118: tmp_36 [2/4] 5.70ns
:2  %tmp_36 = fmul float %y_norm, %tmp_34


 <State 119>: 7.27ns
ST_119: tmp_36 [1/4] 5.70ns
:2  %tmp_36 = fmul float %y_norm, %tmp_34

ST_119: stg_494 [1/1] 1.57ns
:3  br label %._crit_edge6


 <State 120>: 0.00ns
ST_120: p_pn [1/1] 0.00ns
._crit_edge6:0  %p_pn = phi float [ %tmp_35, %10 ], [ %x_norm, %9 ]

ST_120: p_pn1 [1/1] 0.00ns
._crit_edge6:1  %p_pn1 = phi float [ %tmp_36, %10 ], [ %y_norm, %9 ]


 <State 121>: 5.70ns
ST_121: y_norm_1 [4/4] 5.70ns
._crit_edge6:2  %y_norm_1 = fmul float %p_pn1, %g

ST_121: x_norm_1 [4/4] 5.70ns
._crit_edge6:3  %x_norm_1 = fmul float %p_pn, %g


 <State 122>: 5.70ns
ST_122: y_norm_1 [3/4] 5.70ns
._crit_edge6:2  %y_norm_1 = fmul float %p_pn1, %g

ST_122: x_norm_1 [3/4] 5.70ns
._crit_edge6:3  %x_norm_1 = fmul float %p_pn, %g


 <State 123>: 5.70ns
ST_123: y_norm_1 [2/4] 5.70ns
._crit_edge6:2  %y_norm_1 = fmul float %p_pn1, %g

ST_123: x_norm_1 [2/4] 5.70ns
._crit_edge6:3  %x_norm_1 = fmul float %p_pn, %g


 <State 124>: 5.70ns
ST_124: y_norm_1 [1/4] 5.70ns
._crit_edge6:2  %y_norm_1 = fmul float %p_pn1, %g

ST_124: x_norm_1 [1/4] 5.70ns
._crit_edge6:3  %x_norm_1 = fmul float %p_pn, %g


 <State 125>: 7.26ns
ST_125: tmp_22 [1/1] 0.00ns
:0  %tmp_22 = phi float [ %tmp_19, %._crit_edge4 ], [ %tmp_39, %._crit_edge5 ]

ST_125: tmp_23 [1/1] 0.00ns
:1  %tmp_23 = phi float [ %tmp_16, %._crit_edge4 ], [ %tmp_40, %._crit_edge5 ]

ST_125: stg_507 [1/1] 0.00ns
:4  br i1 %tmp_24, label %8, label %11

ST_125: tmp_37 [5/5] 7.26ns
._crit_edge6:4  %tmp_37 = fadd float %tmp_23, %x_norm_1

ST_125: tmp_38 [5/5] 7.26ns
._crit_edge6:8  %tmp_38 = fadd float %tmp_22, %y_norm_1


 <State 126>: 7.26ns
ST_126: stg_510 [1/1] 0.00ns
:0  call void (...)* @_ssdm_op_SpecLoopName([22 x i8]* @p_str7) nounwind

ST_126: tmp_42 [1/1] 0.00ns
:1  %tmp_42 = call i32 (...)* @_ssdm_op_SpecRegionBegin([22 x i8]* @p_str7) nounwind

ST_126: stg_512 [1/1] 0.00ns
:2  call void (...)* @_ssdm_op_SpecPipeline(i32 -1, i32 1, i32 1, i32 0, [1 x i8]* @p_str3) nounwind

ST_126: stg_513 [1/1] 0.00ns
:3  call void (...)* @_ssdm_op_SpecLoopTripCount(i32 0, i32 104, i32 104, [1 x i8]* @p_str3) nounwind

ST_126: stg_514 [1/1] 1.57ns
:39  br i1 %tmp_56, label %9, label %._crit_edge5

ST_126: tmp_37 [4/5] 7.26ns
._crit_edge6:4  %tmp_37 = fadd float %tmp_23, %x_norm_1

ST_126: tmp_38 [4/5] 7.26ns
._crit_edge6:8  %tmp_38 = fadd float %tmp_22, %y_norm_1


 <State 127>: 7.26ns
ST_127: tmp_37 [3/5] 7.26ns
._crit_edge6:4  %tmp_37 = fadd float %tmp_23, %x_norm_1

ST_127: tmp_38 [3/5] 7.26ns
._crit_edge6:8  %tmp_38 = fadd float %tmp_22, %y_norm_1


 <State 128>: 7.26ns
ST_128: tmp_37 [2/5] 7.26ns
._crit_edge6:4  %tmp_37 = fadd float %tmp_23, %x_norm_1

ST_128: tmp_38 [2/5] 7.26ns
._crit_edge6:8  %tmp_38 = fadd float %tmp_22, %y_norm_1


 <State 129>: 8.83ns
ST_129: tmp_37 [1/5] 7.26ns
._crit_edge6:4  %tmp_37 = fadd float %tmp_23, %x_norm_1

ST_129: pvx_req [1/1] 8.75ns
._crit_edge6:5  %pvx_req = call i1 @_ssdm_op_WriteReq.m_axi.floatP(float* %pvx, i32 1)

ST_129: tmp_38 [1/5] 7.26ns
._crit_edge6:8  %tmp_38 = fadd float %tmp_22, %y_norm_1

ST_129: stg_524 [1/1] 1.57ns
._crit_edge6:12  br label %._crit_edge5

ST_129: tmp_39 [1/1] 0.00ns
._crit_edge5:0  %tmp_39 = phi float [ %tmp_38, %._crit_edge6 ], [ %tmp_22, %8 ]

ST_129: tmp_40 [1/1] 0.00ns
._crit_edge5:1  %tmp_40 = phi float [ %tmp_37, %._crit_edge6 ], [ %tmp_23, %8 ]

ST_129: empty [1/1] 0.00ns
._crit_edge5:2  %empty = call i32 (...)* @_ssdm_op_SpecRegionEnd([22 x i8]* @p_str7, i32 %tmp_42) nounwind

ST_129: stg_528 [1/1] 0.00ns
._crit_edge5:3  br label %7


 <State 130>: 8.75ns
ST_130: stg_529 [1/1] 8.75ns
._crit_edge6:6  call void @_ssdm_op_Write.m_axi.floatP(float* %pvx, float %tmp_37, i4 -1)


 <State 131>: 8.75ns
ST_131: pvx_resp [5/5] 8.75ns
._crit_edge6:7  %pvx_resp = call i1 @_ssdm_op_WriteResp.m_axi.floatP(float* %pvx)

ST_131: pvy_req [1/1] 8.75ns
._crit_edge6:9  %pvy_req = call i1 @_ssdm_op_WriteReq.m_axi.floatP(float* %pvy, i32 1)


 <State 132>: 8.75ns
ST_132: pvx_resp [4/5] 8.75ns
._crit_edge6:7  %pvx_resp = call i1 @_ssdm_op_WriteResp.m_axi.floatP(float* %pvx)

ST_132: stg_533 [1/1] 8.75ns
._crit_edge6:10  call void @_ssdm_op_Write.m_axi.floatP(float* %pvy, float %tmp_38, i4 -1)


 <State 133>: 8.75ns
ST_133: pvx_resp [3/5] 8.75ns
._crit_edge6:7  %pvx_resp = call i1 @_ssdm_op_WriteResp.m_axi.floatP(float* %pvx)

ST_133: pvy_resp [5/5] 8.75ns
._crit_edge6:11  %pvy_resp = call i1 @_ssdm_op_WriteResp.m_axi.floatP(float* %pvy)


 <State 134>: 8.75ns
ST_134: pvx_resp [2/5] 8.75ns
._crit_edge6:7  %pvx_resp = call i1 @_ssdm_op_WriteResp.m_axi.floatP(float* %pvx)

ST_134: pvy_resp [4/5] 8.75ns
._crit_edge6:11  %pvy_resp = call i1 @_ssdm_op_WriteResp.m_axi.floatP(float* %pvy)


 <State 135>: 8.75ns
ST_135: pvx_resp [1/5] 8.75ns
._crit_edge6:7  %pvx_resp = call i1 @_ssdm_op_WriteResp.m_axi.floatP(float* %pvx)

ST_135: pvy_resp [3/5] 8.75ns
._crit_edge6:11  %pvy_resp = call i1 @_ssdm_op_WriteResp.m_axi.floatP(float* %pvy)


 <State 136>: 8.75ns
ST_136: pvy_resp [2/5] 8.75ns
._crit_edge6:11  %pvy_resp = call i1 @_ssdm_op_WriteResp.m_axi.floatP(float* %pvy)


 <State 137>: 8.75ns
ST_137: pvy_resp [1/5] 8.75ns
._crit_edge6:11  %pvy_resp = call i1 @_ssdm_op_WriteResp.m_axi.floatP(float* %pvy)


 <State 138>: 2.44ns
ST_138: empty_4 [1/1] 0.00ns
:0  %empty_4 = call i32 (...)* @_ssdm_op_SpecRegionEnd([19 x i8]* @p_str6, i32 %tmp_s) nounwind

ST_138: i_1 [1/1] 2.44ns
:1  %i_1 = add i32 %i, 4

ST_138: stg_544 [1/1] 0.00ns
:2  br label %1


 <State 139>: 0.00ns
ST_139: stg_545 [1/2] 0.00ns
:0  ret void



============================================================
+ Verbose Summary: Timing violations
============================================================
Target clock period: 10ns, clock uncertainty: 1.25ns.

 <State 97>: 9.53ns
The critical path consists of the following:
	'fcmp' operation ('tmp_55', particle_sim_hls/toplevel.cpp:70) (6.79 ns)
	'and' operation ('tmp_56', particle_sim_hls/toplevel.cpp:70) (1.37 ns)
	blocking operation 1.37 ns on control path)

 <State 129>: 8.83ns
The critical path consists of the following:
	'fadd' operation ('tmp_37', particle_sim_hls/toplevel.cpp:82) (7.26 ns)
	multiplexor before 'phi' operation ('tmp_39', particle_sim_hls/toplevel.cpp:83) with incoming values : ('pvy_read', particle_sim_hls/toplevel.cpp:32) ('tmp_38', particle_sim_hls/toplevel.cpp:83) (1.57 ns)


============================================================
+ Verbose Summary: Binding
============================================================
N/A
* FSMD analyzer results:
  - Output states:
 - Input state : 
  - Chain level:
	State 1
	State 2
	State 3
	State 4
	State 5
	State 6
	State 7
	State 8
	State 9
	State 10
	State 11
	State 12
	State 13
	State 14
	State 15
	State 16
	State 17
	State 18
	State 19
	State 20
	State 21
	State 22
	State 23
	State 24
	State 25
	State 26
	State 27
	State 28
	State 29
	State 30
	State 31
	State 32
	State 33
	State 34
	State 35
	State 36
	State 37
	State 38
	State 39
	State 40
	State 41
	State 42
	State 43
	State 44
	State 45
	State 46
	State 47
	State 48
	State 49
	State 50
	State 51
	State 52
	State 53
	State 54
	State 55
	State 56
	State 57
	State 58
	State 59
	State 60
	State 61
	State 62
	State 63
	State 64
	State 65
	State 66
	State 67
	State 68
	State 69
	State 70
	State 71
	State 72
	State 73
	State 74
	State 75
	State 76
	State 77
	State 78
	State 79
	State 80
	State 81
	State 82
	State 83
	State 84
	State 85
	State 86
	State 87
	State 88
	State 89
	State 90
	State 91
	State 92
	State 93
	State 94
	State 95
	State 96
	State 97
	State 98
	State 99
	State 100
	State 101
	State 102
	State 103
	State 104
	State 105
	State 106
	State 107
	State 108
	State 109
	State 110
	State 111
	State 112
	State 113
	State 114
	State 115
	State 116
	State 117
	State 118
	State 119
	State 120
	State 121
	State 122
	State 123
	State 124
	State 125
	State 126
	State 127
	State 128
	State 129
	State 130
	State 131
	State 132
	State 133
	State 134
	State 135
	State 136
	State 137
	State 138
	State 139


============================================================
+ Verbose Summary: Datapath Resource usage 
============================================================
N/A
